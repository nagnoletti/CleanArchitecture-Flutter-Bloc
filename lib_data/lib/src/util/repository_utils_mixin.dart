import 'package:data/src/data_exception.dart';
import 'package:domain/domain.dart';

mixin RepositoryUtilsMixin {
  /// Catches and maps a [DataException] generated by service layer to a domain layer [DataError] object, returning a [Either] with [DataError] as left type.
  /// Feel free to extend the the behavior of [_dataExceptionToError] to:
  ///   - generate newly defined [DataError]-s
  ///   - change the strategy defining how a [DataError] is generated from a [DataException]
  Future<Either<DataError, T>> eitherDataErrorOr<T>(Future<T> Function() f) =>
      Either.tryCatchAsync<DataError, T, DataException>((ex) => _dataExceptionToError(ex), f)
          .onError((error, stackTrace) => Left(DataError.unhandled(cause: error)));

  /// Implements the strategy defining how [DataException]-s are converted to [DataError]-s.
  DataError _dataExceptionToError(DataException ex) => ex.when(
        unhandled: (cause) => DataError.unhandled(cause: cause),
        mapping: (message) => DataError.mapping(),
        remote: (message) => DataError.remote(),
      );
}
